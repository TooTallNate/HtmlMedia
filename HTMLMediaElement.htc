/* The MIT License
 * 
 * Copyright (c) 2010 Nathan Rajlich
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
<PUBLIC:COMPONENT NAME="HTMLMediaElement" LIGHTWEIGHT=true>
    <PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="__initialize()"/>

    <PUBLIC:PROPERTY NAME="error" GET="errorGet" />
    <PUBLIC:PROPERTY NAME="src" GET="srcGet" PUT="srcSet" />
    <PUBLIC:PROPERTY NAME="currentSrc" GET="currentSrcGet" />
    <PUBLIC:PROPERTY NAME="readyState" GET="readyStateGet" />
    <PUBLIC:PROPERTY NAME="seeking" GET="seekingGet" />
    <PUBLIC:PROPERTY NAME="currentTime" GET="currentTimeGet" PUT="currentTimeSet" />
    <PUBLIC:PROPERTY NAME="startTime" GET="startTimeGet" />
    <PUBLIC:PROPERTY NAME="duration" GET="durationGet" />
    <PUBLIC:PROPERTY NAME="paused" GET="pausedGet" />
    <PUBLIC:PROPERTY NAME="ended" GET="endedGet" />
    <PUBLIC:PROPERTY NAME="controls" GET="controlsGet" PUT="controlsSet" />
    <PUBLIC:PROPERTY NAME="volume" GET="volumeGet" PUT="volumeSet" />
    <PUBLIC:PROPERTY NAME="muted" GET="mutedGet" PUT="mutedSet" />

    <PUBLIC:EVENT NAME="onloadstart" ID="onloadstart" />
    <PUBLIC:EVENT NAME="onprogress" ID="onprogress" />
    <PUBLIC:EVENT NAME="onsuspend" ID="onsuspend" />
    <PUBLIC:EVENT NAME="onabort" ID="onabort" />
    <PUBLIC:EVENT NAME="onerror" ID="onerror" />
    <PUBLIC:EVENT NAME="onemptied" ID="onemptied" />
    <PUBLIC:EVENT NAME="onstalled" ID="onstalled" />
    <PUBLIC:EVENT NAME="onplay" ID="onplay" />
    <PUBLIC:EVENT NAME="onpause" ID="onpause" />
    <PUBLIC:EVENT NAME="onloadedmetadata" ID="onloadedmetadata" />
    <PUBLIC:EVENT NAME="onloadeddata" ID="onloadeddata" />
    <PUBLIC:EVENT NAME="onwaiting" ID="onwaiting" />
    <PUBLIC:EVENT NAME="onplaying" ID="onplaying" />
    <PUBLIC:EVENT NAME="oncanplay" ID="oncanplay" />
    <PUBLIC:EVENT NAME="oncanplaythrough" ID="oncanplaythrough" />
    <PUBLIC:EVENT NAME="onseeking" ID="onseeking" />
    <PUBLIC:EVENT NAME="onseeked" ID="onseeked" />
    <PUBLIC:EVENT NAME="ontimeupdate" ID="ontimeupdate" />
    <PUBLIC:EVENT NAME="onended" ID="onended" />
    <PUBLIC:EVENT NAME="onratechange" ID="onratechange" />
    <PUBLIC:EVENT NAME="ondurationchange" ID="ondurationchange" />
    <PUBLIC:EVENT NAME="onvolumechange" ID="onvolumechange" />
    
    <PUBLIC:METHOD NAME="__fireMediaEvent" />
    
    <SCRIPT LANGUAGE="JScript" >
      	var ev, events = {
      	    "loadstart":onloadstart,
            "progress":onprogress,
            "suspend":onsuspend,
            "abort":onabort,
            "error":onerror,
            "emptied":onemptied,
            "stalled":onstalled,
            "play":onplay,
            "pause":onpause,
            "loadedmetadata":onloadedmetadata,
            "loadeddata":onloadeddata,
            "waiting":onwaiting,
            "playing":onplaying,
            "canplay":oncanplay,
            "canplaythrough":oncanplaythrough,
            "seeking":onseeking,
            "seeked":onseeked,
            "timeupdate":ontimeupdate,
            "ended":onended,
            "ratechange":onratechange,
            "durationchange":ondurationchange,
            "volumechange":onvolumechange
      	},
      	initialProps = {};
      	
      	function errorGet() { return this.__errorGet(); }
        function srcGet() { return this.__srcGet(); }
        function currentSrcGet() { return this.__currentSrcGet(); }
      	function readyStateGet() { return this.__readyStateGet(); }
      	function seekingGet() { return this.__seekingGet(); }
      	function currentTimeGet() { return this.__currentTimeGet(); }
      	function startTimeGet() { return this.__startTimeGet(); }
      	function durationGet() { return this.__durationGet(); }
      	function pausedGet() { return this.__pausedGet(); }
      	function endedGet() { return this.__endedGet(); }
      	function controlsGet() { return this.__controlsGet(); }
      	function volumeGet() { return this.__volumeGet(); }
      	function mutedGet() { return this.__mutedGet(); }

      	function srcSet(v) {
      	    if (this.__srcSet) {
      	        this.__srcSet(v);
      	    } else {
      	        initialProps.src = v;
      	    }
  	    }
      	function currentTimeSet(v) {
      	    if (this.__currentTimeSet) {
      	        this.__currentTimeSet(v);
      	    } else {
      	        initialProps.currentTime = v;
      	    }
  	    }
      	function controlsSet(v) {
      	    if (this.__controlsSet) {
      	        this.__controlsSet(v);
      	    } else {
      	        initialProps.controls = v;
      	    }
  	    }
      	function volumeSet(v) {
      	    if (this.__volumeSet) {
      	        this.__volumeSet(v);
      	    } else {
      	        initialProps.volume = v;
      	    }
  	    }
      	function mutedSet(v) {
      	    if (this.__mutedSet) {
      	        this.__mutedSet(v);
      	    } else {
      	        initialProps.muted = v;
      	    }
  	    }
      	
  	    // Cloned nodes, or nodes already inserted in the DOM before creating
  	    // (i.e. is in original HTML), attempt to set props prematurely, this
  	    // ensures props are properly added after the 'setter' functions.
  	    function __initialize() {
            var props = 0;
  	        for (var i in initialProps) {
  	            //window.console.log("initalizing prop: " + i);
  	            this[i] = initialProps[i];
  	            props++;
  	        }
            //window.console.log("calling __initialize: " + props + " premature props");
  	    }
  	    
        // Dispatches an HTML5 media event at the element.
        function __fireMediaEvent(eventName)
        {
            if (eventName in events) {
                ev = createEventObject();
                this.__extendEvent.call(this, ev, arguments);
                events[eventName].fire(ev);
            }
        }
    </SCRIPT>
</PUBLIC:COMPONENT>
